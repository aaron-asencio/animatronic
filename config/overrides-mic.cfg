# Licensed under the BSD license.  See full license in LICENSE file.
# http://www.lightshowpi.org/
#
# Aaron Asencio - Paired down config for mic input for RPi 4.
#
# This is the configuration file for the program. This file follows conventions
# of a python config file. The variables defined below control variable aspects
# of the program.

[hardware]

use_gpu = False

# Devices

# By default no devices are defined
devices = {}

# If using a relay that is active low, set to 'yes'
# Most solid state relays are active high
# Most mechanical relays are active low
active_low_mode = no

# +-----+-----+---------+------+---+---Pi 4B--+---+------+---------+-----+-----+
# | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |
# +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
# |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |
# |   2 |   8 |   SDA.1 | ALT0 | 1 |  3 || 4  |   |      | 5v      |     |     |
# |   3 |   9 |   SCL.1 | ALT0 | 1 |  5 || 6  |   |      | 0v      |     |     |
# |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 1 | IN   | TxD     | 15  | 14  |
# |     |     |      0v |      |   |  9 || 10 | 1 | IN   | RxD     | 16  | 15  |
# |  17 |   0 | GPIO. 0 |   IN | 0 | 11 || 12 | 0 | IN   | GPIO. 1 | 1   | 18  |
# |  27 |   2 | GPIO. 2 |   IN | 0 | 13 || 14 |   |      | 0v      |     |     |
# |  22 |   3 | GPIO. 3 |   IN | 0 | 15 || 16 | 0 | IN   | GPIO. 4 | 4   | 23  |
# |     |     |    3.3v |      |   | 17 || 18 | 0 | IN   | GPIO. 5 | 5   | 24  |
# |  10 |  12 |    MOSI |   IN | 0 | 19 || 20 |   |      | 0v      |     |     |
# |   9 |  13 |    MISO |   IN | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |
# |  11 |  14 |    SCLK |   IN | 0 | 23 || 24 | 1 | IN   | CE0     | 10  | 8   |
# |     |     |      0v |      |   | 25 || 26 | 1 | IN   | CE1     | 11  | 7   |
# |   0 |  30 |   SDA.0 |   IN | 1 | 27 || 28 | 1 | IN   | SCL.0   | 31  | 1   |
# |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |
# |   6 |  22 | GPIO.22 |   IN | 1 | 31 || 32 | 0 | IN   | GPIO.26 | 26  | 12  |
# |  13 |  23 | GPIO.23 |   IN | 0 | 33 || 34 |   |      | 0v      |     |     |
# |  19 |  24 | GPIO.24 |   IN | 0 | 35 || 36 | 0 | IN   | GPIO.27 | 27  | 16  |
# |  26 |  25 | GPIO.25 |   IN | 0 | 37 || 38 | 0 | IN   | GPIO.28 | 28  | 20  |
# |     |     |      0v |      |   | 39 || 40 | 0 | IN   | GPIO.29 | 29  | 21  |
# +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
# | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |
# +-----+-----+---------+------+---+---Pi 4B--+---+------+---------+-----+-----+

# To find the physical pin locations and numbers, run the following command:
# gpio readall
# The 'Name' column will list the GPIO numbers that lightshowPi recognizes, and the 'Physical' column
# shows the physical location of that pin.
# Reference: http://wiringpi.com/pins/
#
#
# Using 8 pins of GPIO on the pi:
#gpio_pins = 0,1,2,3,4,5,6,7
gpio_pins = 24

#
# Using 8 pins of GPIO with FM transmitting on the pi b+:
#pin 7 cannot be used in FM mode because that is used for the antenna
#gpio_pins = 0,1,2,3,4,5,6,21

# Set the mode the pins should be configured in, namely "pwm" for fading in and
# out based upon the frequency response, or "onoff" for an on off switching
# effect when crossing a median frequency response per channel.
#
# Note: Mechanical relays will likely fail much sooner in "pwm" mode, it is 
# suggested to only use pwm mode if using solid state relays (SSR).
#
# You can configure each pin individually, for example:
#pin_modes = onoff,onoff,pwm,pwm,pwm,onoff,onoff
#
# Or you can simply set all pins to the same mode:
pin_modes = onoff

# We use the wiringPi's software pwm library for "pwm" fading:
#
# https://projects.drogon.net/raspberry-pi/wiringpi/software-pwm-library/
#
# TODO(todd giles): Add a page to the wiki with examples of different types of lights and
# relays and the effect produced for various PWM ranges.  The text below should be taken
# with a grain of salt as I have not been able to test as completely as I'd like to yet.
#
# Change the pwm range used for this software pwm by changing this setting.  The optimal 
# setting really depends on your hardware setup.  If you are using zero-cross relays and 
# driving an AC load then using a pwm range of 500 gives decent results (flickering
# effect for many led lights with input rectifiers, and a decent fade for incandescents).
# A range of 500 generates a 20Hz pwm frequency.
#
# If you have random cross relays that can shut-off / on at any time then going for a
# 60 Hz pwm frequency can be advantageous, although timing this to the actual zero crossings
# of the power line used will give the best fading effect - again with incandescent bulbs.
# A range of 167 approximately generates a 60Hz pwm frequency.
#
# If you are attempting to fade a DC led load then the default range of 100 which gives a
# 100Hz pwm frequency works fine.
pwm_range = 100

# If you are using a piGlow set this to True and use the example in lightshowpi/contrib
# set device and gpio_pins
piglow = False

[configs]
# Define more config files for additional functionality

# Add one or more LED RGB Pixel configuration file(s) see led1.defaults.cfg 
# copy led1.defaults.cfg to led1.cfg, customize, and set led_config = led1.cfg
# SPI ( direct from Pi pins ), Serial USB ( AllPixel, Arduino ), or sACN ( network device )
# led_config = led1.cfg
# led_config = led1.cfg,led2.cfg
led_config =

# Turn on multiprocessing for LED processes ( experimental ) default = False
led_multiprocess = False

[fm]
# By setting fm to true it will output the fm signal on pin 7 (GPCLK0)
# otherwise will result in output through the line out port
# frequency is the fm channel to play on
fm = False
frequency = 100.1

[lightshow]
# We support the following modes for running light shows:

# ---------------------------------------------------------------
# 'playlist' mode specific configurations for the lightshow
# ---------------------------------------------------------------
# Play song files on the RPi from the playlist as defined below, with
# the preshow defined before each song. (default)
#mode = playlist
playlist_path = $SYNCHRONIZED_LIGHTS_HOME/music/sample/.playlist
randomize_playlist = no
songname_command =

# ---------------------------------------------------------------
# 'audio-in' mode specific configurations for the lightshow
# ---------------------------------------------------------------
# Control the lightshow from an audio stream coming from a usb-audio dongle
# See http://lightshowpi.org/usb-audio-in-support/ for 
# more details on using audio-in mode.
mode = audio-in

# The name of the input audio card to use, by default use the default system
# audio input device.  You can override this to another card by setting it to the
# name found from the audio_in_cards.py script (in tools directory).
audio_in_card = sysdefault:CARD=Device


# ---------------------------------------------------------------
# 'stream-in' mode specific configurations for the lightshow
# ---------------------------------------------------------------
# Control the lightshow from an audio stream coming from a streaming source
# You will need to set input_channels = 2 and input_sample_rate = ( usually 44100 )
# mode = stream-in

# this example will play a shoutcast/icecast stream
stream_command_string = sudo mpg123 --stdout http://193.34.51.115:80

# Example using Shairport Sync to stream AirPlay https://github.com/mikebrady/shairport-sync
# stream_command_string = shairport-sync -v -o stdout

# You can also use a fifo to get streams like Pandora from players like pianobar

# stream_command_string = pianobar
# NOTE: To use pianobar you must set it up to auto login and auto play a station
# refer to this post for an example pianobar config to do this
# http://ubuntuforums.org/showthread.php?t=1533357&p=9746309#post9746309

# A basic pianobar config that will allow you to login and autostart a station
# is included in lightshowpi/config/contrib
# You will need to place in the root users folder
# /root/.config/pianobar/config

# lightshow fifo settings.  Used with stream-in option.

# To use a fifo you will need to add an alsa plugin to /etc/asound.conf
# A copy of the plugin is included in lightshowpi/config/contrib
use_fifo = False

# Song count and exit. Used with stream-in option.
#
# Set your stream_song_delim to match a pattern in your stream output.
# examples are provided for pianobar and icecast metadata updates.
# occurences of these patterns will indicate a new song.
# stream_song_delim = |>  "
stream_song_delim = ICY-META: StreamTitle=
# Set stream_song_exit_count = number of songs to play before exiting. zero disables.
stream_song_exit_count = 0

# ---------------------------------------------------------------
# mode specific configurations shared by audio-in and stream-in
# ---------------------------------------------------------------
# The number of input channels, usb dongle or stream, typically 1 or 2:
#   1 - mono / mic input
#   2 - stereo input / stream
input_channels = 1

# The rate at which to sample input from the usb dongle or stream
#  48000 - mic input
#  44100 - stream input
input_sample_rate = 48000
#input_sample_rate = 44100 

# ---------------------------------------------------------------
# audio_out_card configuration for the lightshow
# ---------------------------------------------------------------
# The name of the output audio card to use, by default use the default system
# audio output device.  You can override this to another card by setting it to the
# name found from the audio_in_cards.py script (in tools directory).
# Another way to get the name of the card to use and the proper format to use is to run 
# aplay -L | grep default 
# on the command line and copy the part of the output you need, as an example this command 
# tells me that the default Alsa card built into the RPI is
# sysdefault:CARD=ALSA
# and that my usb sound card is
# sysdefault:CARD=Device 

# If you are using a usb sound card and do not want to set is as the default,
# you can just set it here and not have to edit your alsa-base.conf / alsa.conf files
# All of this applies to audio_in_card as well 
#audio_out_card = default
audio_out_card = sysdefault:CARD=Device

# Default is to be on for 10 seconds and off for 1 with no channel_control overrides
# no audio played.
preshow_script = 
preshow_configuration = 
	{
		"transitions": [
			{
				"type": "on",
				"duration": 0,
				"channel_control": {
				}
			},
			{
				"type": "off",
				"duration": 1,
				"channel_control": {
				}
			}
		],
		"audio_file": null
	}

# ---------------------------------------------------------------
# postshow config
# ---------------------------------------------------------------
# postshow configuration is identical to the preshow configuration
# see above for syntax
# Default is to be disabled
# no audio played.
postshow_script = 
postshow_configuration = 

# ---------------------------------------------------------------
# common lightshow configuration options (affects multiple modes)
# ---------------------------------------------------------------

# Override channels to be always on, always off, or inverted. inverted channels
# will turn off when music is played, and on otherwise.  These lists are 1
# based (i.e. the first channel starts at 1).

# Always keep channels 2 and 6 on:
#always_on_channels = 2,6

# Always keep channel 5 off:
#always_off_channels = 5

# Invert the output for channel 4 and 8:
#invert_channels = 4,8

# Default (-1) disables each of these settings
always_on_channels = -1
always_off_channels = -1
invert_channels = -1

# Allow lights to become less "blinky" by fading out after a peak response
# Typical values should be in the range of 0.05 to 0.20
# Smaller values will cause the lights to remain on longer
# Setting decay_factor to 0 will disable this functionality
decay_factor = 0

# ---------------------------------------------------------------
# attenuate percentage
# ---------------------------------------------------------------

# Lower the response value for the lights by a percentage
# Typical values should be in the range of 20-50
# Higher values will cause the lights to be more off than on in onoff mode
# Setting attenuate_pct to 0 will disable this functionality
attenuate_pct = 0

# ---------------------------------------------------------------
# Standard Deviation
# ---------------------------------------------------------------

# Once the mean audio level and standard deviation is calculated for a channel
# the standard deviation is used to determine the range of audio levels that
# change the brightness level of the light(s) on that channel (presuming PWM is enabled).
#
# If the audio level is less than (mean - SD_low), lights will be off.
# If the audio level is more than (mean + SD_high), lights will be at maximum brightness.
# Between these two values, the brightness will be set proportionate to where the audio
# level falls in this range.
#
# SD_low=0.5 and SD_high=0.75 preserve the original behavior by default.

SD_low = 0.5
SD_high = 0.75

# light_delay is the number of seconds the light display is delayed from the input audio
# use zero for an audio device output. Typically this is less than 1.0
light_delay = 0.0

# Set the logging level of the lightshow module
DEBUG
# INFO
# WARNING
# ERROR
# CRITICAL
#log_level = INFO

[audio_processing]
# Note: You may have to delete the song cache after changing these settings.

chunk_size = 2048

# The following values control the frequencies to which the channels will
# respond. With min_frequency being the lowest frequency for which a channel
# will be activated and max_frequency being the max frequency for which a 
# channel will be activated.

# The frequency range will be evenly divided between all the channels defined
# in gpio_pins. 

# Note that custom_channel_frequencies overrides these settings.
#85-255Hz for human voices m/f
# Note that custom_channel_frequencies overrides these settings.
#min_frequency = 20
#max_frequency = 15000
min_frequency = 85
max_frequency = 255


# The following setting can be used to custom map the channels, in effect
# this can programmatically allow you to switch a specific channel of
# lights to a different frequency without having to physically rewire the
# channels.

# For example: Imagine we have 8 channel's output that are connected to
# corresponding gpio_pins. When the frequencies are mapped without using
# custom_channel_mapping, and with a channel mapping defined as:
#custom_channel_mapping = 1,2,3,4,5,6,7,8
# the lowest frequency is assigned to channel 1, the next highest to channel
# 2, and so on until the highest value is mapped to channel 8 (the 8th pin
# defined in gpio_pins).

# Now say you wanted your THIRD channel to have the lowest frequency, without
# using custom_channel_mapping you would have to physically rewire channel 3.
# With custom channel mapping you simply define:
#custom_channel_mapping = 1,2,1,4,5,6,7,8
# Now both channel 1 and channel 3 will activated when the lowest frequency is
# played. custom_channel_mapping must be the same size as gpio_pins.

# If you want to create a mirroring effect for the lights define:
#custom_channel_mapping = 1,2,3,4,4,3,2,1
# With custom channel mapping the program will only calculate and distribute
# frequencies for the highest channel listed in custom_channel_mapping. So in
# this mirroring example, the program will evenly distribute the frequencies.

# The default is not to define custom channel mapping and let the program
# map the channels 1:1
custom_channel_mapping =


# Defining custom_channel_frequencies overrides the min_frequency and
# max_frequency settings, allowing you to define a custom list of frequencies
# that should be utilized for each channel. The list must be the size of
# (gpio_pins + 1) or if custom_channel_mapping is being used it must be the
# size of the max value + 1 in the custom_channel_mapping list.
#custom_channel_frequencies = 0,156,313,625,1250,2500,5000,10000,15000
# Raspberry Pi Model B+
#custom_channel_frequencies = 0,833,1666,2499,3332,4165,4998,5831,6664,7497,8330,9163,10829,11662,12495,13328,14161,15000
custom_channel_frequencies =

[sms]
# If you desire to use SMS set to True, otherwise set this variable to False
enable = False

# Set the logging level of the sms module
# DEBUG
# INFO
# WARNING
# ERROR
# CRITICAL
log_level = INFO

# All enabled sms commands must be defined here, otherwise they will be
# reported as errors when requested. Note: Each command must be defined in the
# 'py/sms_commands.py' file as a function. See that file for examples.
commands = help,volume,play,vote,list

# Commands can have aliases defined here.  IMPORTANT: Make sure that the
# aliases are defined with the longest aliases first, otherwise the shorter
# alias may win out and pass along part of the longer alias as if it were
# an argument to the command (e.g. vol, v and not v, vol)
#
# TODO(todd giles): Add auto-aliases based upon best match from all commands
help_aliases = h
volume_aliases = vol, v
play_aliases = p, next, n
list_aliases = l, songs

# Short description of each command (returned in help request).  Leave
# the description blank to not have it returned in help requests.
help_description =
volume_description = vol<level>: vol+, vol-, v95
play_description = play<song#>: play3, p3
vote_description = vote<song#>: vote1, or simply 1
list_description = list: lists all songs

# Configuration options for the list command.
# Note: There is a SMS character limit for most carriers, your message may
# still be chopped into multiple text's.
# The number of songs to return per sms message
list_songs_per_sms = 4
# The number of songs to return in a list
list_songs_per_page = 4


# The default command is the command assumed when the sms message doesn't
# match any given command or command alias.
default_command = vote

 term 'all' can be used to create
# groups that apply to all cell #'s.
admin_users = +11111111111:,+12222222222:
guest_users = +13333333333:
voting_users = all

# Specify which commands each group has access to. Each command must be
# defined in 'commands' above. The special term 'all' includes all defined
# commands.
admin_commands = all
guest_commands = play
voting_commands = help,vote,list

throttle_time_limit_seconds = 3200
admin_throttle = all:100
guest_throttle = play:10,vote:60,all:100
voting_throttle = vote:10,all:100

blacklist = +14444444444:,+15555555555:

unknown_command_response = Hrm, not sure what you needed, try texting 'help' ...

unauthorized_response = Hrm, not sure what you needed, try texting 'help' ...

# The response given when throttle limits have been reached
throttle_limit_reached_response = Thank you, but the system has reached its maximum number of requests for the time being. Please try again in a little while.


[network]

networking = off

port = 8888

buffer = 1024

channels =

[terminal]
# This boolean if set to True will disable sending brightness values to your hardware,
# and instead send them to a curses based terminal window renderer that will dynamically
# render columns of channel brightness values.
# https://docs.python.org/2/howto/curses.html
# https://en.wikipedia.org/wiki/Curses_(programming_library)
# This allows you to shake out the audio to brightness pipeline without having to hang
# your hardware off the pi.
# Launch synchonized_lights.py with the same command line as you normally would, and the
# active terminal will be used to render.
# The curses instance is launched in a way that ensures any runtime errors or tracebacks
# are still dumped on return to the normal command line.
enabled = False
